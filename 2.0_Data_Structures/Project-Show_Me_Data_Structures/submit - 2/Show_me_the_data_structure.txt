# Problem 1

### Design

This implementation is done using an OrderedDict which is a high level module. Under the hood, the implementation
is a double linkedlist and a dictonary. the get() method is used to retreave item using a provided key while the 
the set method sets new value is the key is not already present in the dictionary.


### Time Complexity
The use of get() and set method all looks checks if a key is present in the dictionay. With that in mind, code runs
in constant time in the order of O(1) got both the get() and set() methods at average case and O(n) at the worst case 
where _n_ is the cache capacity.

### Space complexity
Space comlexity takaes the order of in O(n) where _n_ in this case is the capacity of the cache initalized. Average case would be 
constant time is the capcity is one hence order of 0(1) with the worst case as 0(n) where _n_ is the cache capacity.

# Problem 2

### Design

The data structure under the hood is a tree with start of the directory as the root and sub-directories speading to new branches.

This is implemented using recursion process, on a visit of each folder, and searches for a match before moving to the next folder. This is a classic 
case of a depth first search. The process is continued recursively until all the branches have been visited 

### Time complexity, 
It takes linear time O(n). 
This is because we have to visit each leaf at every branch of the tree and therefore will depends on the number of leaves and branches 
on the tree. Average case would be O(1) where the tree only had a root (a folder in this case) and O(n) where _n_ is the number of 
visits to all the leaves.

### Space complexity
This depends on the numbers of nested directorories and sub-directorirs that will have to be printed out. Just as with the time complexity,
average case will ne in the order of O(1) and the worse case O9n) where n is the number of returns the function does.

# Problem 3

## Design:
This is implemented by utilizing three 4 different classes namely, Node, Queue, Tree and a HuffmanEncoder giving a clean developmental approach.
Two different data structures are used in this solutin namely 

Node -> Leaf node for each character of the text containing the occurring frequency of that character.
 
Queue - > used in storing elemets on a In First Out (FIFO) basis and their freequncy in the inuput text.

Tree -> A tree is built using the data in the queue depending in the freequency of the elements with all the values stored at the leaves of the tree.

HuffmanEncoder - > Does the encoding and decoding of the input characters


##Complexity
Time complexity depends on the size of the input string thereby giving a linear time O(n). Space complexity also depends on the size of input string to be decoded. 



### Time Complexity
* Encoding:

Encoding takes the order of O(nlogn) is the overall time complexity where _n _is the number of characters.

* Decoding:

For every encoded symbol you have to traverse the tree in order to decode that symbol. The tree contains k nodes and, on average, 
it takes O(log k) node visits to decode a symbol. So the time complexity would be O(n log k).

## Space Complexity
* Encoding:
The space complexity takes the order of O(n) where n is the number of characters in the input string. 

* Decoding:
Space complexity for decoding is in the order of O(n) where  _n_ is the length of the decoded text.


# Problem 4

This solution is implemented usig a tree data structure.The Group acts as a the root and sub-group as the branches and members of the group as
leaves. 

### Complexity
The time complexity is this implementation is dependent on the number of iterations run by the algorithm, in terms of number of groups
and users in the group therefore taking a linear time O(n). The leaves are visited using depth first search and the deepender the leave is the
longer it takes hence  _n_ in this case will the number of leaves and how long it takes to get to all leaves in every branch.


Space complexity also depends on the number of outputs from the function hence O(n).The final data structure for the groups or members is a list 
and therefore _n_ in this will depends on the number of groups or members available.

# Problem 5

Design:

Key design for this prolem is a linkedlist
This implementation includes a Blockchain class with an additional method called update block which updates the current block with a value.

### Complexity
Time Complexity

The time complexity of update_block is O(1) as it runs in constant time. 

Space Complexity
Space complexity is in the order of O(n*k) where n is the length of charaters in the input sting at _k_ is the hash function. After hashing, 
the space complexity of the Blockchail gets to the order of O(n) where n is the length of the chain.

# Problem 6 


This problem is solved using a number of data structures. 

Sets: Unordered datasets where elements are not repeated. In this problem, sets are used to breate 
a new linklist where no elements are repeated. 


Union: Takes the  two input lists as sets and joins them together in a single linklist

Insersection: Finda new list of elements that are present in both linkedlists1 and linkedlist1 that have 
been joined together.


###Complexity
###Time complexity
Union operations takes in a new list and creates a set of elements from each linkedlist. This prcess takes linear
time 0(n) where n is the number of elements in the list.

The second part of the union is the creation of  anew list based on the set created in the previous step. Here,
while the process still takes linear time, the good news here is the the length of the list depends on the 
number of unique elements with average case of a constant time 0(1) if there only one element and worse case at 0(n) 
where n is the total number ofdifferent unique elements in the set.

Intersection: 

### Space Complexity

In respect to the _space time complexity, the temporary list created thereby all the lists created thereby O(n). 
The _n_ here refers to the number of elements in each list. In the case of sets, evergage case would be 0(1) where
there is only one unique element in the set or at worse _n_ in which case n refers to total unique elements in the set

The intersection will also be in the order of 0(n) where _n_ refers to the list of similar elements
in both the lists.